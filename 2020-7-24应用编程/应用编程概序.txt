文件IO(Input/Output)
	对文件的操作API已经原理
	
并发
	多进程
	进程间通信
	多线程
	
网络编程
	网络基础知识
	TCP/UDP
	unix域协议
	广播/多播
	
IO模型

数据库操作




整个嵌入式linux核心包括5个部分:
	裸机编程(裸奔)  单片机,STM32
	C高级-----指针,结构体,数据结构
	uboot和系统移植  
	linux应用编程:在linux操作系统的基础上实现一系列的应用程序
	驱动 一小部分嵌入到操作系统的代码,能够让操作系统认识硬件。
	
	典型的嵌入式产品一般都是基于linux操作系统来工作的,如:手机,平板,路由器....
		
	典型的嵌入式产品的研发过程:
		a.让linux系统能够在硬件上面运行起来(开机)
		b.基于linux系统研发应用程序(能够完成以下功能)
			
	嵌入式产品也可以没有操作系统	
	
	1.裸机编程
	没有操作系统(OS)支持的硬件系统编程
		单片机
		STM32
		....
		裸奔:实际上是通过软件直接控制硬件(寄存器)
			只有两层
				硬件层
				应用层(软件,APP)
				
		缺点:工程师必须能够看懂硬件原理图
			
		特点:简单
			应用是直接操作硬件(寄存器)资源并且是单任务的
			适合于硬件比较少,项目不太复杂的情况
			
		随着科技的发展,硬件资源越来越丰富,项目越来越复杂	
		把操作硬件的这一部分代码,单独的弄出来----->操作系统
		
		
		带操作系统的应用:
			应用:只能够调用系统提供的API去间接的操作硬件
			OS:硬件资源的管理者和分配者(牛逼的程序)
				
		=====>
			学习使用OS提供给我们的方法和函数,
			理解函数和方法的实现方式
			
		分为三层
			APP(应用程序)
			-------
			OS(操作系统)
			------
			Hardware(硬件)
		
		特点:
			应用开发可以把精力放到程序的业务逻辑上,而不需要关心硬件的具体实现细节
			提供并发功能,允许同时运行多个应用程序“多任务”
	
		linux操作系统下进行应用开发,就是调用系统API函数,去操作具体的硬件,或者是使用linux的服务:
			如:
				open
				read
				write
				close
				...
	
	
1.什么是操作系统?
		
	

	
	
	




















	


















