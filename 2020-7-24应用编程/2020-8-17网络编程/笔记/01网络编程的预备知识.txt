1.网络协议层次模型
		网络分层就是将网络结点所要完成的数据发送或者转发,打包或拆包,控制信息的加载或者拆出的工作,分别由不同的硬件或者软件模块去完成。
	“层次”:模块.在一个大的软件协议中,我们通常把一些功能做成模块
		功能模块之间存在相互调用的关系
		
	OSI七层模型(Open System interconnect)
		符合国际标准化组织的网络互连模型
		
		应用层	各种应用程序接口
		表示层  数据格式的转换以及加密..
		会话层	建立,管理和维护会话
		传输层	建立,管理和维护端到端的连接
		网络层	IP选址以及路由选择  “数据包”
		数据链路层	提供介质的访问和链路管理
		物理层	规范电压以及电路接口
				
	TCP/IP四层模型
		应用层
			每一个应用程序有自己的应用协议(按照应用程序规定封装/解封数据)
			http/ftp/其他的私有协议(QQ协议)....
			
		传输层(TCP/UDP)
			主要的作用是解决数据如何传输的问题
			TCP:Transport Control Protocol  传输层控制协议
			是一种面向连接的传输层协议,他能提供高可靠性通信(即数据无误,数据无丢失,数据无失序,数据无重复到达)
				"面向连接"
				三次握手(两军问题)
				四次挥手
				重发机制
				窗口滑动机制(实现流量控制)
				...
			UDP:User Datagram Protocol 用户数据报协议
			是一种不可靠的无连接的协议,在数据发送前,因为不需要进行连接,所以可以进行高效率的数据传输 “实时应用”
				数据有及时性
		
		网络层(IP/ICMP/IGMP(ping))(路由器)
			可以把数据分组发送到目标网络或者主机,为了尽快的发送数据,有可能会沿不同的路径同时进行数据传输。因此,数据到达的顺序和发送的顺序可能不同,就需要上层(传输层)对数据进行排序
		数据链路层
		
2.网络数据是如何传输的(看图)
	分层传输(每一层把处理后的数据交给下一层(封包)或者上一层(拆包))
	每一层实现各自的功能和协议,并且都为上一层提供业务功能.下一层直接将上一层的数据并入到本层的数据中,然后通过添加包头和包尾实现该层业务功能。
		
3.常见的网络设备
	路由器(网络层):选择网络数据的下一站。
		   能够连接不同类型的局域网和广域网。
		如:教室内的用户的公网IP都是相同的,然后我们将数据发送给路由器,路由器通过公网IP访问互联网查询数据,然后路由器再将查询到的数据传递到私有IP地址。
		路由器利用网络寻址功能使路由器能够在网络中确定一条最佳路径。路由器的某一个接口接收到数据时,会查看数据包中的目的IP地址以判断该数据包的目的地址在当前路由表中是否存在(即路由器是否知道到达目标网络的路径),如果发现包的目标地址与本路由器的某一个接口所连接的网络地址相同,那么就会把数据发送到相应的接口,如果发现目的地址不在自己的直连网段,就会查看路由表,如果路由表中没有记录,则会把数据包转发到默认端口(外网)。
		
	集线器(hub):工作在第一层(物理层),没有任何智力,对他来说,数据仅仅是电流,当一个端口的电流到达集线器时,它只是简单的将电流传送到其他端口(数据的整流和放大)。
	
	交换机:工作在第二层(数据链路层),相对集线器来说,智能一点点,对于他来说,网络数据就是MAC地址的集合,能够分别出数据中的源MAC地址和目的MAC地址,但是交换机并不懂IP是什么。
		
	网关(Gateway):
		实质上是一个网络通向其他网络的IP地址,
		网络A的IP:192.168.1.1~192.168.1.254     子网掩码:255.255.255.0
		网络B的IP:192.168.2.1~192.168.2.254		子网掩码:255.255.255.0
		在没有路由器的情况下,是不能通信的
		要实现两个网络的通信,必须通过路由器,通过网关
		A中的主机发送的数据包不在本局域网内部,就需要把数据包交给自己网关,再由网关转发给网络B的网关,再转发到网络B的主机。
		
4.互联网的IP地址
	直接在百度搜索IP,会显示一个公网IP(和互联网通信的IP),在cmd中输入ipconfig或者在linux中输入ifconfig会显示出私有IP(局域网内部的IP).
	这两个IP是不一样的,公有IP一般是运营商分配,公网IP才能上"网",但是不可能给每一个电脑分配一个IP,IPV4肯定是不够用的,所有需要私有IP,这种IP一般是用于句语音的管理,不能直接连上互联网,必须通过公网IP。
	
	互联网上每一个接口(网卡)必须有唯一的internet地址(IP地址)
	进行网络通信时,用这个IP地址唯一的标识一台主机(一个网卡)
	IPV4:32bits  使用点分式表示 
	一般会把32bits分为两个部分,像日常生活中的电话的“区号”和“主机号”
		
		网段号:用来标识某一个局域网段
		主机号:用来标识特定局域网中的特定的主机
			网段号是IP地址中连续的高位
			主机号是IP地址中连续的低位
			
									IP地址的范围				私有IP地址范围
A	0 网络号(7bits) 主机号(24bits)	0.0.0.0~127.255.255.255   10.0.0.0~10.255.255.255
B   10网络号(14) 主机号(16)		   128.0.0.0~191.255.255.255 172.16.0.0~172.31.255.255
C   110网络号(21) 主机号(8)			192.0.0.0~223.255.255.255 192.168.0.0~192.168.255.255
D   1110 多播组号(28bits)  			224.0.0.0~239.255.255.255
E   11110 留待后用
	在设置一个IP地址时,我们还需要指定这个IP地址中哪些bit是网段号,哪些bit是主机号
	netmask(子网掩码) 就是用来指定IP地址中哪些bit是网段号,哪些bit是主机号
		netmask中为1的bit是网段号(网段号是IP地址中连续的高位)
		netmask中为0的bit是主机号(主机号是IP地址中连续的低位)
		
		255.255.255.0
		前面的24个bit是网段号
		255.255.128.0 (合法)
		前面的17个bit是网段号
		255.255.127.0 (不合法)
		
	路由表:告诉路由器,网络数据的下一个接收地址
		命令:route
		
	IP地址只是用来唯一的标识网络上面的一台主机。	
	一台主机上面有可能有很多网络应用程序
	
5.端口号
	TCP和UDP采用16bits的端口号来标识应用程序
	IP地址只能用来唯一的标识网络上面的一台主机。但是每一台主机上面并不只是跑一个网络应用程序,可能有多个网络应用程序,而且网络应用从传输层的角度看可以分为TCP和UDP(TCP和UDP的端口号相互独立)。
	为了区分这些网络应用,提出了端口号的概念。
	一台主机上面的网络应用程序由:IP地址 +  传输层协议(TCP/UDP) + 端口号 确定
	端口号由IANA管理
		分为很多类:
		1~1023 众所周知的端口(大家都知道的端口)
				21-ftp
				80-http  
					在浏览器中输入一个网状时不需要指定端口号,默认情况下www服务的端口号是80
				ssh-22
				....
		1024~49151 注册端口 
				分配给用户进程或者应用程序的
				....
		49152~65535 动态绑定或者私有端口
		
6.字节序问题
	大端模式:低地址存放数据的高字节
	小端模式:低地址存放数据的低字节
	
	网络字节序采用大端模式

7.socket编程接口
	一个网络编程的接口,是一种特殊的文件描述符(read/write).
	独立于具体协议的网络编程接口,是一种特殊的文件,这个接口位于传输层和应用层之间。
	把复杂的TCP/UDP隐藏在编程接口(socket)后面,对应用户来说,只需要操作socket就可以实现网络通信
	socket类型
	(1).流式套接字(SOCK_STREAM)
		面向字节流,针对传输层协议为TCP的网络应用
	(2).数据报套接字(SOCK_DGRAM)
		面向无连接的通信,针对传输层协议为UDP的网络应用
	(3).原始套接字(SOCK_RAW)
		直接跳过传输层协议,可以处理内核中最原始的网络(IP)数据包
	
8.基本的TCP/UDP的套接字编程流程
	CS结构
	Client  客户端   
			IP + 传输层协议(套接字类型) + 端口号
	Server  服务器   
			IP + 传输层协议(套接字类型) + 端口号	
	








