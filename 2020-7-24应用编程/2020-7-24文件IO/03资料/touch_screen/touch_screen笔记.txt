触摸屏的操作(能够获取点的坐标)

触摸屏也是一个文件,对应的文件名为 "/dev/input/event0"
不仅是触摸屏,其他的输入设备也是文件,对应的文件名不一样
所有的输入设备,在linux系统中都归结于linux输入子系统管理。

linux输入子系统,处理所有的输入信息
	能够获取触摸屏,鼠标,键盘....输入信息,把信息封装成为一个“输入事件(input_event)”
	把事件数据写入到对应的文件中去。
	如果APP需要读取输入的数据,打开对应的文件,把事件数据读取出来即可
	
	“输入事件”如何保存呢? C语言使用结构体去描述一个复杂的事件
	struct input_event;
	
/*
 * The event structure itself
 */
使用下面的结构体描述一个输入事件
struct input_event {
	struct timeval time;  	//时间,事件发生的时间
	__u16 type;				//事件的类型,什么设备发生的事件
	__u16 code;				//事件的编码,由type决定
	__s32 value;			//值,根据type和code一起决定
};	


//事件的类型,什么设备发生的事件		
__u16 type;				
/*
 * Event types
 */

#define EV_SYN			0x00
#define EV_KEY			0x01   	//按键事件
#define EV_REL			0x02	//相对事件(鼠标移动)
#define EV_ABS			0x03	//绝对事件(触摸屏)
#define EV_MSC			0x04
#define EV_SW			0x05
#define EV_LED			0x11	
#define EV_SND			0x12
#define EV_REP			0x14
#define EV_FF			0x15
#define EV_PWR			0x16	//电源管理事件
#define EV_FF_STATUS		0x17
#define EV_MAX			0x1f
#define EV_CNT			(EV_MAX+1)
	

struct input_event ev;
	if(ev.type == EV_ABS)
	{
		是一个触摸屏事件,结构体记录了触摸点信息
	}


//事件的编码,由type决定
__u16 code;				
type不同,code存在不同的含义:
	1.当ev.type == EV_KEY 时,此事件为按键事件
	code表示键值,国际标准化组织给世界上所有的按键都分配了一个标准值
	如:
		如果按了一下键盘A,就会产生一个输入事件,并且会把输入事件写入到键盘对应的文件
		type == EV_KEY
		code == KEY_A   (code == 30)

		//值,根据type和code一起决定				
		__s32 value;			
	在这种情况下,value表示按键的状态
		如:
		1	表示按下
		0	表示弹起
		2 	表示一直按着
		
	APP如何读取输入事件呢?	
		把文件中的输入事件读取出来即可
		//打开文件
		
		//读取信息
		
		//关闭文件
		
	写一个代码测试一下:
	ubuntu中可以键盘 "/dev/input/event1"



	2.当ev.type == EV_REL 时,此事件为相对事件
		鼠标移动
		鼠标移动至少会产生两个事件,一个记录x的相对偏移量,一个记录y的相对偏移量,
		code表示相对坐标轴向
			code == REL_X  此事件记录的是x的相对偏移量
			value 表示x方向相对偏移量的值

			code == REL_Y  此事件记录的是y的相对偏移量
			value 表示y方向相对偏移量的值


	3.当ev.type == EV_ABS 时,此事件为绝对坐标事件(触摸屏)
		code表示绝对坐标轴向
			code == ABS_X  此事件记录的是x的绝对坐标
			value 表示x绝对坐标值

			code == ABS_Y  此事件记录的是y的绝对坐标
			value 表示y绝对坐标值

			如何检测手指是否弹起呢?
			a.ev.type == EV_ABS && ev.code == ABS_PRESSURE && ev.value == 0
			
			b.ev.type == EV_KEY && ev.code == BTN_TOUCH && ev.value == 0  <------

	练习:
		1.获取触摸点的坐标
		2.获取手指滑动方向(只需记录两个点,起点和终点)
		3.写一个函数,调用的时候能够获取手指的滑动方向。
		enum dec
		{
			UP,
			DOWN,
			LEFT,
			RIGHT
		};
			
		enum get_fx()
		{
			//打开文件
			int fd = open("/dev/input/event0",O_RDWR);
			if(-1 == fd)
			{
				perror("open event0 error");
				return -1;
			}

			struct input_event ev;
			//读取输入事件
			int x0=-1,y0=-1;//起点
			int x,y; //终点
			
			while(1)
			{
				int r = read(fd,&ev,sizeof(ev));
				if(r != sizeof(ev))
				{
					continue;
				}
				//解析输入事件
				if(ev.type == EV_ABS)
				{
				
					if(ev.code == ABS_X)
					{
						if(x0 == -1)
						{
							x0 = ev.value;
						}
						x = ev.value;
					}
					if(ev.code == ABS_Y)
					{
						if(y0 == -1)
						{
							y0 = ev.value;
						}
						y = ev.value;
					}
				}
				//手指松开
				if(ev.type == EV_KEY && ev.code == BTN_TOUCH && ev.value == 0)
				{
					break;
				}
			}
			//关闭文件
			close(fd);
			//printf("x0 = %d,y0 = %d\n",x0,y0);
			//printf("x = %d,y = %d\n",x,y);

			if(y<y0&&abs(x-x0)<=abs(y-y0))
			{
				printf("up\n");
				return UP;
			}
			else if(y>y0&&abs(x-x0)<=abs(y-y0))
			{
				printf("down\n");
				return DOWN;
			}
			else if(x<x0&&abs(x-x0)>=abs(y-y0))
			{
				printf("left\n");
				return LEFT;
			}else if(x>x0&&abs(x-x0)>=abs(y-y0))
			{
				printf("right\n");
				return RIGHT;
			}	
		}
		
		
		int get_fx()
		{
			if(y<y0&&abs(x-x0)<=abs(y-y0))
			{
				printf("up\n");
				return 1;
			}
			else if(y>y0&&abs(x-x0)<=abs(y-y0))
			{
				printf("down\n");
				return 2;
			}
			else if(x<x0&&abs(x-x0)>=abs(y-y0))
			{
				printf("left\n");
				return 3;
			}else if(x>x0&&abs(x-x0)>=abs(y-y0))
			{
				printf("right\n");
				return 4;
			}	
		}

	作业:
		写一个程序,能够扫描一个指定目录中的所有图片文件,并且能够手动滑动显示
			
			main.c
			{	
				//初始化LCD
				//测试BMP显示是否成功
				//测试jpg显示是否成功
				//创建链表
				//搜索目录图片文件
				//测试是否成功
				
				//取链表的第一个结点 p
				while(1)
				{
					//打印文件名
					if(p == bmp?)
					{
						draw_bmp;
					}else if(p == jpg)
					{
						draw_jpg;
					}
					//sleep(2)
					//p = p->next;
					int d = get_fx();
					if(d == ?)
					{
						p?
					}
					
					if(p == NULL)
					{
						p = first;
					}
				}
				
				//关闭LCD
			}
			Linklist.c/Linklist.h
			lcd.c/lcd.h
			bmp.c/bmp.h
			jpg.c/jpg.h
			touch.c/touch.h
		
		














