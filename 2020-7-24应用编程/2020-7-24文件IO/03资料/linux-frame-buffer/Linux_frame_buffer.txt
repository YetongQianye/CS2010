Linux_Frame_Buffer

1.原理
	LCD的显示
	LCD在linux中是什么?  是文件!!!
	如何操作LCD屏幕?
		按照操作文件的方法操作即可
		打开 	open
		读写	write
		关闭	close
		
	一个文件对应一个文件名:
		LCD对应的文件名为:/dev/fb0
		linux把LCD这种硬件设备抽象成FrameBuffer
		FrameBuffer：帧缓冲(可以显示一帧图像)
		
	LCD图像的显示:一个一个像素点的显示
	像素点:描述一个点的颜色	
	分辨率:可视屏幕上面有多少个像素点
	将LCD上面所有的像素点都描绘成不同的颜色,就可以组成一幅图像

	颜色的组成: RGB 三原色
	每一个基色使用一个byte表示(8bit),给基色中的每一个bit位赋值为不同的值则可以代表不同的颜色(量化  0~255 红的程度不一样)
	请问一个基色能够表示多少种颜色? 2^8  256
	请问三个基色能够表示多少种颜色? 2^24  1670万
	颜色可以使用3byte表示
	
	LCD上面一个像素点:ARGB   A:透明度(1byte)
	LCD上面描述一个像素点占用几个字节? 4 byte
	如果使用一种数据类型描述颜色的话?可以使用什么数据类型？  int
		int color;
		给color赋值为不同的值,就表示不同的颜色
	红色:0x00FF0000
	绿色:0x0000FF00
	蓝色:0x000000FF
	白色:0x00FFFFFF
	黑色:0x00000000
	
	如果要把开发板的屏幕显示为某一种颜色,是不是需要把颜色数据写入到文件中去
	对于帧缓冲设备:
		在内存中开辟一段空间,用来保存屏幕上面每一个像素点的颜色值,操作内存中的颜色值,就是操作像素点。
		帧缓冲设备是linux为显示提供的一个接口,把显存抽象后的一种设备。它让上层应用程序不需要关心硬件的具体实现,上层应用只需要在显存中填上合适的颜色数据,然后帧缓冲驱动就会在屏幕对应的位置显示这个颜色。
		
		屏幕上面每一个像素点都对应4字节的内存(从上至下,从左至右)
		
	屏幕操作步骤:
		//1.打开文件

		//2.写入颜色数据

		//3.关闭
	
	开发板的屏幕分辨率:
		800*480
		每一行有800个点,有480行
	如果有一个未知大小的屏幕,怎么办?
		
	手动的获取屏幕的信息

	ioctl
	用来进行对文件/设备除了读写以外其他的操作
	每一个设备的控制操作不同,这些控制操作是由具体的设备或者驱动决定的。
	
NAME
       ioctl - control device

SYNOPSIS
       #include <sys/ioctl.h>

       int ioctl(int fd, unsigned long request, ...);
		fd:文件描述符,表示你要控制哪一个设备
		request:命令号,在驱动中实现的,一般会把对设备的操作,取一个命令号,命令的具体含义由驱动决定
		...:由第二个参数决定
		返回值：
			成功返回0
			失败返回-1,同时errno被设置
			
	例子:
		利用ioctl来获取屏幕的信息
		关于帧缓冲,有两个最常用的命令号
		FBIOGET_FSCREENINFO   	返回与帧缓冲有关的固定信息,如硬件加速...
		FBIOGET_VSCREENINFO		返回与帧缓冲有关的可变信息,如,帧缓冲长度,宽度....
		与这两个命令对应的有两个结构体,我们使用到的是 FBIOGET_VSCREENINFO
		struct fb_var_screeninfo fbinfo;
		ioctl(fd,FBIOGET_VSCREENINFO, &fbinfo); //会把屏幕的可变信息保存到fbinfo指向的结构体
		// /usr/include/linux/fb.h
		
struct fb_var_screeninfo {
	__u32 xres;			//可视屏幕的宽度,一行的像素点的个数
	__u32 yres;		//可视屏幕的高度
	__u32 xres_virtual;		/* virtual resolution		*/
	__u32 yres_virtual;
	__u32 xoffset;			/* offset from virtual to visible */
	__u32 yoffset;			/* resolution			*/

	__u32 bits_per_pixel;		/* guess what			*/
			//每一个像素点占用的bit数量
	__u32 grayscale;		/* 0 = color, 1 = grayscale,	*/
					/* >1 = FOURCC			*/
	struct fb_bitfield red;		//描述红色的信息  红色在bits_per_pixel中占用的那些位
	struct fb_bitfield green;	/* else only length is significant */
	struct fb_bitfield blue;
	struct fb_bitfield transp;	//透明度信息
	......
}	

struct fb_bitfield {
	__u32 offset;			/* beginning of bitfield	*/
							//颜色开始的位
	__u32 length;			/* length of bitfield		*/
							//颜色的长度
	__u32 msb_right;		/* != 0 : Most significant bit is  right */ 
};	
		
		
2.上面的操作效率比较低
	如果通过write操作显存,
	write是系统函数,调用的时候要进行状态装换
	用户态----->内核态
		  <-----	
	把显存映射到用户的内存空间,如果要操作显存就只需要操作普通的内存即可
	不需要使用write函数了
	
	使用系统IO读写一个文件的时候,实际上是把文件的内容拷贝到内存或者是把内存的内容写入到硬件,有人说,能不能把文件的内容直接映射到用户的地址空间,然后操作这个文件,就直接去操作映射后的内存就可以了。
	
	mmap:把指定的文件或者设备映射到用户的内存空间,访问内存的速度比访问硬件快很多
NAME
       mmap, munmap - map or unmap files or devices into memory
		映射或者解映射设备或文件到内存中
SYNOPSIS
       #include <sys/mman.h>
		mmap用来把指的文件映射到内存
       void *mmap(void *addr, size_t length, int prot, int flags,
                  int fd, off_t offset);
		addr:指针,你要把文件或者设备映射到进程地址空间的哪一个位置
			有人说,我怎么指定应该映射到哪一个地址?
			一般人不知道,这个参数一般为NULL,表示让操作系统给我自行分配一个地址
		length:要映射的文件的长度
				向上取PAGE_SIZE(4096)的整数倍,在内核中,内存是以页为单位分配的
		prot:映射的内存区域的权限(应该和打开文件时的权限一致,因为操作此区域内存实际上就是操作文件的内容)
				PROT_READ	可读
				PROT_WRITE	可写
				PROT_EXCL	可执行
				PROT_NONE  	无权限
				PROT_READ | PROT_WRITE
		flags:映射标志,决定映射部分的操作是否对其他进程可见
			MAP_HARED 共享映射,对其他进程可见,对内存的会直接同步到文件
			MAP_PRIVATE	私有映射,对其他进程不可见,对内存的不会直接同步到文件(不会影响原文件)
		fd:你要映射哪一个文件
		offset:偏移量,一般为0
		
		解映射		  
       int munmap(void *addr, size_t length);
		addr:解映射的首地址,一般是mmap的返回值
		length:解映射长度
		进程退出会自动的munmap
		但是关闭文件,不会自动的munmap,在关闭文件前请手动的munmap
返回值：
		On success, mmap() returns a pointer to the mapped area.  On error, the value MAP_FAILED (that is, (void *) -1) is returned, and  errno  is
       set to indicate the cause of the error.
		成功返回映射后的内存的首地址
		失败返回MAP_FAILED,同时errno被设置
       On success, munmap() returns 0.  On failure, it returns -1, and errno is set to indicate the cause of the error (probably to EINVAL).
		
	LCD操作:
		打开文件
		
		映射内存
		
		操作内存(通过指针)
		
		解映射
		
		关闭文件
		
	映射之后,屏幕上面的像素点在映射的内存中是从上至下从左至右排列的
	int *plcd = mmap();//映射lcd到内存    每一个像素点对应4字节(int *)
	plcd指向的是屏幕上第一个像素点(0,0)的地址,屏幕上面第二个像素点(0,1)地址为plcd+1

	如果需要把第0行的第0个点显示为红色,怎么办?
		找到像素点对应的内存地址,把0x00ff0000放到对应的内存地址
		第0行的第0个点对应的内存地址为plcd, *plcd = 0x00ff0000
		
	如果需要把第0行的第1个点显示为红色,怎么办?
		找到像素点对应的内存地址,把0x00ff0000放到对应的内存地址
		第0行的第1个点对应的内存地址为plcd+1, *(plcd+1) = 0x00ff0000	
	如果需要把第0行的第x个点显示为红色,怎么办?	
		找到像素点对应的内存地址,把0x00ff0000放到对应的内存地址
		第0行的第x个点对应的内存地址为plcd+x, *(plcd+x) = 0x00ff0000	
	如果需要把第y行的第x个点显示为红色,怎么办?	
		找到像素点对应的内存地址,把0x00ff0000放到对应的内存地址
		 
	======>
	屏幕上面任何一个点都可以通过指针操作。

	练习:
		利用内存映射的方法,在屏幕指定的位置显示一个指定大小的矩形。
		
	lcd.h
	//初始化屏幕
	int *init_lcd();
	
	//清理屏幕
	
	//显示矩形
	
	
	//关闭屏幕
	void close_lcd();
	
	lcd.c	
	int *init_lcd()
	{
		打开设备
		映射
		返回首地址
	}	
		
	//关闭屏幕
	void close_lcd( ?? )
	{
		//解映射
		
		//关闭
	}	
		
		
		
		
		
		


