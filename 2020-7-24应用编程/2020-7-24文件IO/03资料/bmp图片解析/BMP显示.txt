BMP图片的显示
	bmp是一种图片的存储格式,Bit Map Picture 位图
	原理:将一张图片的所有的像素点的每一个bit映射(保存)到文件中
	====>bmp图片是没有被压缩的
	
	位深:每一个像素点占用的bit数量
		24bit  一个像素点占用24bit    	RGB
		32bit  一个像素点占用32bit		ARGB
		
	图片为24位位图,
		大小应该为:(24/8)*200*200 = 120000   理论
									120054 ????  实际
		BMP图片的前面使用54个字节保存图片的属性信息
		如,大小,宽度,高度,位深......
		
		199*199尺寸图片大小应该为:(24/8)*199*199  + 54= 118857
														119454  ???
				600*199+54 = 119454												
		windows要求bmp图片的一行大小必须是4的倍数,如果一行不是4的倍数,则填充为4的倍数
		
	写代码显示BMP图片:
	1.把需要显示的图片放到开发板中去
	2.显示	
		打开LCD
		映射到内存
		
		把bmp文件中的像素点信息拿出来,写入到显存
			打开bmp图片
			读取所有的像素点信息
			关闭图片
			解析所有的像素点且显示
			
		解映射
		关闭LCD
	
	注意:
		1.BMP图片的存储方式为小端模式
			BGR -----> ARGB
			
		2.BMP图片的像素点的存储是从下到上,从左至右(从最后一行开始存储的)
		

	效果:
		能够在屏幕上面显示一张bmp图片
		
		//打开屏幕
		//映射显存到内存
		
		//直接通过指针操作屏幕(不需要write/lseek)
		显示图片(bmp/jpg)和数据(传感器数据)
		
		//解映射
		//关闭屏幕

文件IO
触摸屏  <----
图片
串口可以获取传感器数据(温湿度,距离,烟雾) <---
文字的显示 <---
jpg <----


作业:
	bmp.c/bmp.h
	1.把bmp图片显示写出一个函数的形式
	void lcd_draw_bmp()
	{
		//把bmp文件中的像素点信息拿出来,写入到显存
		//打开bmp图片
		int fd_bmp = open("1.bmp",O_RDWR);
		if(fd_bmp == -1)
		{
			perror("open bmp error\n");
			//解映射
			munmap(plcd,800*480*4);
			//关闭
			close(fd);
			close(fd_bmp);
		}
		
		//读取所有的像素点信息
		char buf[200*200*3] = {0};
		lseek(fd_bmp,54,SEEK_SET);
		read(fd_bmp,buf,200*200*3);
		
		//关闭图片
		close(fd_bmp);
		
		//解析所有的像素点且显示
		int x,y;
		char b,g,r; 
		int color;
		int i = 0;
		for(y=199;y>=0;y--) //图片总共有200行
		{
			for(x=0;x<200;x++)//图片每一行有200个点
			{
				//解析一个像素点
				b = buf[i];
				g = buf[i+1];
				r = buf[i+2];
				i+=3;
				color = (r<<16) | (g << 8) | (b);
				Lcd_draw_point(x,y,color);
			}
		}
	}
	
	2.把bmp图片(24位&&一行的大小是4的倍数)显示写成一个函数的形式
	//把名字为name的bmp图片显示到(x0,y0)的位置,图片的大小为w*h
	void lcd_draw_bmp(int x0,int y0,int w,int h,char *name)
	{
	
	}
	
	3.把bmp图片(24位&&一行的大小是4的倍数)显示写成一个函数的形式
	//把名字为name的bmp图片显示到(x0,y0)的位置
	void lcd_draw_bmp(int x0,int y0,char *name)
	{
		//从bmp文件的头部54个字节获取
		read()
	}
	
	
	4.把bmp图片(任何BMP都可以(24bit || 32bit)  可以一行不是4的倍数)显示写成一个函数的形式
	//把名字为name的bmp图片显示到(x0,y0)的位置
	void lcd_draw_bmp(int x0,int y0,char *name)
	{
	
	}
	
	
	
	
	
	
	
	
	


























