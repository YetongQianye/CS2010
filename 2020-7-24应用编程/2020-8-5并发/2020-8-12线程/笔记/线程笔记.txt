为了能够“并发”的执行任务,现代操作系统特地引入了“进程”的概念
	对于进程,虽然能够实现并发,但是也会有一些缺点
	1.进程的地址空间是独立的,进程间通信的代价比较大
		如果进程需要进行数据交换,肯定需要进程间通信(pipe/fifo/msg/shm/sem...)
				copy		copy
		P1进程  ----->内核 ------>P2进程
	
	2.创建一个进程的系统开销比较大,因为要拷贝父进程的所有("copy-on-write")

	于是,有人就提出了一个想法,能不能在同一个进程地址空间内部实现“任务”的并发呢?
		线程(轻量级进程)
		
1.线程的概念
	1.线程是比进程更小的活动单位,它是进程中的一个执行路径(执行分支),线程依附于一个进程
	2.进程内部的所有线程共享进程的地址空间
	
	线程的特点:
		1.创建一个线程比创建一个进程的开销要小得多。
		因为不需要拷贝父进程的地址空间,线程不拥有系统资源,只有一些在运行中不可缺少的数据结构
		进程是分配系统资源的最小单位。

		2.实现线程间的通信十分简单,因为进程内部的所有线程共享进程的地址空间,线程间的通信不需要通过内核。

		3.线程也是一个动态的概念(ready/runing/blocking)
		是进程内部的一个执行分支,线程是用来并发的执行进程内部的指令的	
		C语言的指令必须在函数内部,所以所有的线程都对应一个线程函数,线程的工作就是去执行指定的线程函数,如果线程函数执行完了,则线程退出
		
		4.一个进程内部有一个主线程(main函数),在进程运行过程中,可以创建其他子线程。
			主线程(主函数)结束(return/exit),所有子线程都会被强制退出

		5.进程是分配系统资源的最小单位。系统是按照线程进行调度的(一个线程就是一个任务,也需要分配CPU时间),线程是参与CPU竞争的最小单位
			在进程内部创建多个线程,会提高进程的CPU占用率
			
	基本上知道线程是什么了?		
			
		Thread的实现方式有很多种,比较常用的是POSIX标准的线程
		POSIX标准的线程函数需要连接多线程库(libpthread.so)

2.linux下面线程相关的API函数
	1.创建一个线程 pthread_create
		每一个线程都有一个线程ID(tid),类似于进程ID(pid)
		用来唯一的标识一个线程,在pthread中,使用pthread_t来描述一个线程ID
		typedef unsigned long pthread_t
		
		线程属性(pthread_attr_t)结构体
			线程ID
			线程的优先级
			线程的栈空间大小
			.....
		在pthread中,线程属性使用pthread_attr_t来描述,同时还提供了几个用于改变线程属性的API函数,但是不建议程序员直接修改pthread_attr_t的结构体,而是使用线程默认属性(NULL)
		
		线程是进程内部的一个指令的执行分支,多个线程,就是多个指令序列并发的执行
		C语言的指令必须在函数内部,所以所有的线程都对应一个线程函数,一个线程创建成功后,要执行的指令序列都在一个指定的函数中"线程函数"
		在创建线程时候,要指定线程的“线程函数”???
		如何指定呢?
		指定线程函数的地址,把线程函数的地址作为参数传入创建线程的API中。存在一个问题:
			张三的线程函数:
			int func(int )
			{
				....
			}
			&func  ====>int (*)(int);		
		
			李四的线程函数:
			void func(int *,int )
			{
				...
			}
			&func =====>void (*)(int *,int);
			
			因为线程函数的地址(函数指针)作为参数传入,函数指针也是有类型的,规定线程函数的地址必须为 
				void *(*start_routine) (void *);//函数指针
				start_routine是一个函数指针,保存一个函数的地址,这个函数的类型应该是:
				void *func(void *)
				{
					...
				}
			所有的线程函数的类型必须有一个void *的返回值,并且带一个void*的参数	
			
	NAME
		   pthread_create - create a new thread

	SYNOPSIS
		   #include <pthread.h>
				pthread_create:用来创建一个新线程的	
		   int pthread_create(pthread_t *thread, const pthread_attr_t *attr,
							  void *(*start_routine) (void *), void *arg);
				thread:指针,指向一块可用的内存,保存线程的线程号
						线程的线程号可以使用pthread_self()获取
				attr:线程属性,指针,指向一个pthread_attr_t的结构体,次结构体保存的是新创建的线程的线程属性,一般使用NULL表示使用OS的默认属性
				start_routine:函数指针,执行创建的线程要执行的函数
				arg:void *,线程函数的实际参数
						如果线程函数不需要参数,可以写为NULL
						如果线程函数需要一个参数,可以传入参数的地址
						如果线程函数需要两个/多个参数呢?
						变成一个参数,封装成一个结构体
						struct arg_test
						{
							int a;
							char b;
						};
				返回值：
					成功返回0
					失败返回-1,同时errno被设置
				
		   Compile and link with -pthread.

	练习:
		练习pthread_create的使用。

	2.线程退出	
		2.1 线程函数结束
			线程函数返回/结束,线程自动退出
			
		2.2 在线程执行的任意时刻,调用pthread_exit()
			NAME
				   pthread_exit - terminate calling thread
			SYNOPSIS
				   #include <pthread.h>
				   void pthread_exit(void *retval);
					retval:指针,指向的位置可以被其他线程读取
						retval指向的位置不应该存在于栈上,因为线程终止后栈的内容是未定义的
			
		2.3 被其他的线程干掉了(cancel)
			其他线程调用pthread_cancel
			NAME
				   pthread_cancel - send a cancellation request to a thread
			SYNOPSIS
				   #include <pthread.h>
				   int pthread_cancel(pthread_t thread);
					thread:要取消的线程号
					返回值:
						成功返回0
						失败返回非0
			
			t1:pthread_cancel(t2);
			t1调用pthread_cancel取消线程t2,t2线程一定会被取消吗?
			不一定的,取决于线程属性中的一个属性(是否可被取消)
			可以使用一个接口去修改取消属性。
			pthread_setcancelstate()
			NAME
				   pthread_setcancelstate, pthread_setcanceltype - set cancelability state and type
			SYNOPSIS
				   #include <pthread.h>
				   int pthread_setcancelstate(int state, int *oldstate);
					state:要设置的“取消属性”的值,有以下两种
						PTHREAD_CANCEL_ENABLE   默认属性(可被取消)  0
						PTHREAD_CANCEL_DISABLE  不可被取消			1
							如果收到取消请求,则取消请求会累积到下一次线程设置为可取消为止
					oldstate:指针,指向一个可用的空间,保存上一次的取消状态
						返回值:
						成功返回0
						失败返回其他值
				   int pthread_setcanceltype(int type, int *oldtype);
						
			一个线程退出了,并不代表线程它所有的资源都已经被释放了.一般还保存了一些基础的数据结构
			一个线程退出,它的资源是否全部被释放,取决于线程的一个属性:
				detach 分离属性
					ENABLE 分离状态
						该线程结束后,它所有的资源都会自动的被释放
					DISABLE 非分离状态(默认属性)
						该线程结束后,它会有一部分资源不会释放,必须要其他线程调用pthread_join函数才能回收资源
				pthread_detach 用来设置一个线程的分离属性(仅仅能设置为分离)		
			
			NAME
				   pthread_detach - detach a thread
			SYNOPSIS
				   #include <pthread.h>
					pthread_detach:用来分离一个线程
				   int pthread_detach(pthread_t thread);
					thread:线程ID,要分离的线程的ID
					返回值:
						成功返回0
						失败返回其他值	
					一般用法:
					pthread_detach(pthread_self()); //分离自己		
		如果线程是非分离的,在线程结束后,需要调用pthread_join函数去回收线程的资源并且读取线程的退出信息pthread_exit(retval);
					
		pthread_join等待一个线程退出并且释放线程资源
		一个以分离的线程不需要调用pthread_join
		
		pthread_join()函数等待thread指定的线程终止.如果该线程已经终止,则pthread_join（）立即返回.thread指定的线程必须是可连接的。
		NAME
			   pthread_join - join with a terminated thread
		SYNOPSIS
			   #include <pthread.h>

			   int pthread_join(pthread_t thread, void **retval);
				thread:要等待退出的那个线程的线程ID
				retval:类型是一个二级指针
					二级指针,用来保存退出线程的返回状态的
					把线程的返回值保存到retval指向的内存地址中去
					只不过retval是一个二级指针,保存了一个一级指针的地址,因为线程的返回值本来就是一个一级指针
					
				返回值:
					成功返回0
					失败返回其他值
				作用:
					1.等待线程退出(本身是阻塞的)
					2.回收被等待的线程的线程资源
			
			为什么是一个“二级指针”?
			线程函数的类型为:
				void *func(void *)
				{
					int *p = malloc();//保存了一些非常重要的信息
					//return (void *)p;
					pthread_exit((void *)p);
				}
				
			在其他函数(pthread_join)中就需要去读取这些非常重要的信息。
			如何读取重要信息呢?只能用一个指针指向线程返回的地址
				=====>
				void *r = NULL;// 准备使用r保存线程返回的地址
				r = p;//理论上在pthread_join中应该做这一句。
				由于r不在pthread_join的作用域下面,在pthread_join中不能直接访问r,只能间接访问,需要r的地址,====>需要传入r的地址
				pthread_join(tid,&r);
				&r ---->指针的地址,二级指针

	3.线程间的同步
		线程之间也需要访问一些共享资源(线程共享进程地址空间),为了对共享资源的有序访问,需要对共享资源进行某种方式的保护,=======>"信号量机制"
		
		任何的全局变量,malloc对象.....都是共享资源,多个线程都可以同时访问
			先确定共享资源
			在确定临界区
			再使用"信号量机制"去保护
		
			信号量机制
				System V信号量   ---->内核
				POSIX信号量(sem_t)
						有名信号量  --->内核
						无名信号量	--->"内存"
				
		线程互斥锁
			线程互斥锁是存在于进程地址空间内部的一种保护机制“类似于信号量”,只不过存在于进程地址空间
			在POSIX多线程中,使用pthread_mutex_t类型表示一个线程互斥锁类型,线程互斥锁只能用于进程内部的线程的同步,操作方法类似于“无名信号量”
				同样:
					1.定义一个锁
						pthread_mutex_t mutex;//mutex就表示一个线程互斥锁
					2.初始化锁	
					3.P/V操作(上锁/解锁)
					4.销毁
			线程互斥锁的接口函数:
				pthread_mutex_init() 初始化一个线程互斥锁
				pthread_mutex_destory()  销毁一个线程互斥锁
				pthread_mutex_lock()	P操作
				pthread_mutex_unlock()	V操作
			
			系统默认是没有按照POSIX手册页,很多函数man找不到
				sudo apt-get install manpages-posix-dev
				sudo apt-get install manpages-posix
			
		1.初始化/销毁线程互斥锁	
			NAME
				   pthread_mutex_init — destroy and initialize a mutex
			SYNOPSIS
				   #include <pthread.h>
					pthread_mutex_init:用来初始化mutex指向的线程互斥锁的
						在初始化前,需要定义一个线程互斥锁
					int pthread_mutex_init(pthread_mutex_t *restrict mutex,
					   const pthread_mutexattr_t *restrict attr);
						mutex:要初始化的线程互斥锁的指针
						attr:线程的属性,一般建议写NULL,表示使用默认属性
						返回值：
							成功返回0
							失败返回非0值,同时errno被设置	
					pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;
					等价于:
					pthread_mutex_t mutex;
					pthread_mutex_init(&mutex,NULL);
					线程互斥锁默认初始化后的值为1
					
					restrict:C语言的关键字,指定的指针是访问数据对象的唯一方式,所有修改该指针指向的内存的内容的操作都必须通过该指针修改
					volatile:C语言的关键字,使用此关键字修饰的变量是“易变的”
					
					int pthread_mutex_destroy(pthread_mutex_t *mutex);
						pthread_mutex_destroy销毁mutex指向的线程互斥锁(变为未初始化状态)
		
		2.P/V操作(上锁/解锁)
			NAME
				   pthread_mutex_lock, pthread_mutex_trylock, pthread_mutex_unlock — lock and unlock a mutex

			SYNOPSIS
				   #include <pthread.h>
				   pthread_mutex_lock:获取mutex指向的线程互斥锁
						如果不能获取则阻塞“死等”
				   int pthread_mutex_lock(pthread_mutex_t *mutex);
					pthread_mutex_trylock:尝试获取mutex指向的线程互斥锁
						不能获取则立即返回“非阻塞版本”
				   int pthread_mutex_trylock(pthread_mutex_t *mutex);
						返回值:
					返回0表示获取了该线程互斥锁,可以进入临界区执行代码
					返回-1,表示出错了,没有获取到线程互斥锁
		
					NAME
						   pthread_mutex_timedlock — lock a mutex
					SYNOPSIS
						   #include <pthread.h>
						   #include <time.h>
							限时等待,等待到一个固定的时间点“绝对时间”
							类似于信号量的sem_timedwait.
							abstime是一个“绝对时间”,是未来的一个时间点
						   int pthread_mutex_timedlock(pthread_mutex_t *restrict mutex,
							   const struct timespec *restrict abstime);	
					
				   int pthread_mutex_unlock(pthread_mutex_t *mutex);	
					 pthread_mutex_unlock用来释放mutex指向的线程互斥锁
		
		信号量和线程互斥锁还有一个功能:
			能够确保一段代码不会被打断
			
			P1进程:
			P操作(上锁)
			//不可被打断的代码
			while(..)
			{
				...
			}
			V操作(解锁)
			
			P2进程:
			P操作(上锁)
			//不可被打断的代码
			while(..)
			{
				...
			}
			V操作(解锁)
	

	4.生产者-消费者模型
		大部分的应用程序都符合生产者消费者模型
		程序中有两类进程/线程
			生产者 负责产生 数据/任务/请求
			消费者 负责消耗 数据/任务/请求
			
		模型中的两个问题:
			1.数据既可以被生产者访问,又可以被消费者访问
				肯定是一个共享资源,需要使用“信号量机制/线程互斥锁”保护

			2.当缓冲区中没有数据/请求的时候,消费者线程应该怎么办?
				a.不停的去测试,查看数据是否满足要求/存在请求------>"轮询"
						浪费CPU
						
						while(1)
						{
							if(条件是否满足)
							{
								处理数据
							}
						}	
				b.让出CPU(休眠),当数据满足要求的时候,在来“唤醒”我。
						=====>需要用到线程条件变量
				
	5.线程条件变量	
		在多线程编程中,可以使用一个“条件变量”,表示一个特定的条件或者事件。
		
		pthread_cond_t 条件变量的类型
		至于这个条件变量具体表示什么,完全由程序员自己解释

		在一个条件变量上面,一般有三种操作:
			1.初始化一个条件变量
			2.等待一个条件变量(等待“条件变量”表示的事情发生)
			3.唤醒一个条件变量(唤醒正在等待“条件变量”的线程)

		线程1中
		if(条件不满足/事件没发生)
		{
			wait(条件变量);
			.....
		}
		
		线程2中
		条件发生了/事件发生
		wakeup(条件变量);
		....

		条件变量本身也是共享资源,也需要保护
		一般在写程序的时候,条件变量和线程互斥锁是成对出现的
		
		1.初始化一个线程条件变量
			NAME
				   pthread_cond_destroy, pthread_cond_init — destroy and initialize condition variables
			SYNOPSIS
				   #include <pthread.h>
				   pthread_cond_init:用来初始化一个线程条件变量
					int pthread_cond_init(pthread_cond_t *restrict cond,
					   const pthread_condattr_t *restrict attr);
						cond:指针,指向你要初始化的条件变量
						attr:指针,指定条件变量的属性,一般使用NULL表示使用OS的默认属性
					返回值：
						成功返回0
						失败返回其他值
					   
				   pthread_cond_t cond = PTHREAD_COND_INITIALIZER;
						pthread_cond_destroy:销毁cond指定的条件变量
				    int pthread_cond_destroy(pthread_cond_t *cond);
					返回值：
						成功返回0
						失败返回其他值
				   
		2.等待一个条件变量(等待一个事件发生)
			NAME
				   pthread_cond_timedwait, pthread_cond_wait — wait on a condition
			SYNOPSIS
				   #include <pthread.h>
				   pthread_cond_wait:用来指定一个条件变量“阻塞等待”
					int pthread_cond_wait(pthread_cond_t *restrict cond,
					   pthread_mutex_t *restrict mutex);
						cond:指针,你要等待的条件变量
						mutex:线程互斥锁.为了保护共享资源的线程互斥锁,mutex一般是访问共享资源前获取的锁,再次需要避免“带锁等待”。
						
						注意:
						一般在调用pthread_cond_wait前肯定获取了锁
						“mutex”处于锁定状态,这样就造成了一个问题“带锁等待”
						
						pthread_cond_wait(cond,mutex)
						{
							//mutex  锁定状态
							解锁(mutex);
							让出CPU,阻塞;//sleep()
							when 条件产生,在其他子线程“wakeup”
							lock(mutex);锁定状态
							....
						}
						
				   int pthread_cond_timedwait(pthread_cond_t *restrict cond,
					   pthread_mutex_t *restrict mutex,
					   const struct timespec *restrict abstime);
					   abstime:限时等待,等待到一个固定的时间点“绝对时间”
				   返回值:
						成功返回0
						失败返回其他值

		3.唤醒一个条件变量
			NAME
				   pthread_cond_broadcast, pthread_cond_signal — broadcast or signal a condition
			SYNOPSIS
				   #include <pthread.h>
					pthread_cond_broadcast:以广播的形式唤醒正在等待此条件变量的所有线程
					但是哪一个线程能够获取条件,是不一定的
				   int pthread_cond_broadcast(pthread_cond_t *cond);
					pthread_cond_signal:用来至少唤醒一个正在等待的线程
				   int pthread_cond_signal(pthread_cond_t *cond);

	
		练习:
			1.首先自己创造一个例子,多个线程访问一个共享对象造成“竞争”
			2.利用线程互斥锁解决上面的问题。
		
作业:
	1.进程和线程有什么区别?
	
	2.什么时候使用进程,什么时候使用线程?	
			
		

1.什么是进程?

2.为什么需要进程的概念?

3.进程间的通信方式有哪些?

4.进程和线程有什么区别?

5.进程间互斥/同步的手段?
		信号量
6.线程间互斥/同步的手段?
		信号量/线程互斥锁
		
7.线程并发相对于进程并发有什么优势?

8.什么是条件变量?

9.linux既可以使用线程,又可以使用进程,什么时候用进程,什么时候用线程呢?
	1.需要频繁创建或者销毁的优先用线程
	2.需要进行大量计算的优先用线程
	3.耦合性强(强相关)优先使用线程,耦合性弱(弱相关)优先使用进程,
	4.可能扩展到多机分布的用进程,多核分布用线程
	5.没有特殊要求,用最熟悉的方式。
	
10.什么是线程安全,线程可重入函数。
	
	
	
作业:
	利用线程实现一个文件夹(目录)的copy,只考虑目录和普通文件
	
		void cpdir(char *src,char *dest)
		{
			opendir(src);
			while(readdir())
			{
				//子目录
				cpdir()
				//普通文件
				创建一个线程,让线程执行cp的拷贝函数
			}
		}
	
	
		//void mycp(char *file1,char *file2)
		void mycp(int fd1,int fd2)
		{
			while()
			{
				read(f1);
			
				write(f2);
			}
		}
	
		
			
			
			
			
			
			
			
			












