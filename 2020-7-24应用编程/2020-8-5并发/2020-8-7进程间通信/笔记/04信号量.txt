信号量
	如果有两个或者两个以上的任务(进程/线程,并发的实体),同时去访问一个共享资源(硬件/软件),我们必须保证这个共享资源的有序访问,否则会产生不可预知的结果。
	例子:
		very_important_i = 5;//共享资源
		
		void fun()
		{
			very_important_i++;
		}
		如果有两个任务同时调用了fun这个函数,那么请问very_important_i最后的值有可能是多少?
			A.4  	B.5(不可能)  	C.6  	D.7  	E.8(不可能)	
				C和D都是有可能的
		在并发中,任务(进程/线程)在任意时刻都是有可能被暂停的
			++操作至少会分为三步:
				取值
				加1
				写回
		出现的结果为6,就不是对共享资源的有序访问,是有问题的,所有我们需要对这个共享资源进行某一种方式的保护,使共享资源总是被有序访问的(结果总是7)“避免竞争”
		
	并发虽然可以提高CPU的利用率,有可能会产生竞争,造成共享资源的非法访问,程序进入异常。
	解决方法:
		能不能不使用并发呢?
			显然不可能
		目的是在保留并发的前提下,“避免竞争”,在访问共享资源时,严格的串行。		
		====>信号量
		
1.信号量(semaphore)机制
	信号量是什么?
	信号量的作用是什么?
	为什么需要信号量?
	信号量的原理是什么?
	如何使用信号量?
	
	信号量(semaphore)是一种用于提供不同进程或者一个进程内部不同线程间的同步,是“避免竞争”的一种方式。
	信号量的目的就是为了保护共享资源,让共享资源有序访问的一种机制。
	信号量是程序界最高尚的一个东西,因为他不是为了自己而存在的,它是为了保护别人(共享资源)而存在的“保镖”。
		
2.信号量是如何工作的?	












































