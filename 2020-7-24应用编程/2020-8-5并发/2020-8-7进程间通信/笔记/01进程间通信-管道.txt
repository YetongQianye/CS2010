进程间通信(IPC)
IPC:internal process communication

实质:信息(数据)的交换

有人就说,这个还不简单吗?
	我在一个进程里面定义一个全局变量a,然后再给a赋值一些有特殊含义的值,然后再让另一个进程去读取这个a的值,不就可以了嘛?
	这种方法,可以吗?
	肯定是不可以,因为进程的地址空间是独立的。
	所有,两个进程要通信,必须把数据放到大家都可以访问到的一个地方
	
	文件(一个文件可以被多个进程同时打开,也是最早期的进程间通信)
		文件在文件系统中,大家都可以访问
		但是这种方式,有一个缺点:通信的速度太满了
		
	======>
	一般的改进方式:在操作系统内核中开辟一段空间(某一种机制,提供具体的API),进程再去访问
	
	IPC的方式:
		管道
			pipe 无名管道
			fifo 有名管道
		信号
		消息队列	SystemV消息队列/Posix消息队列
		共享内存	SystemV共享内存/Posix共享内存
		信号量		SystemV信号量/Posix信号量
		socket通信(unix域协议)
		
1.管道
	很久很久以前,进程间通信的方式都是通过文件,
	这种方式,有一个缺点:
		它的效率太低了
	但是这种方式,也有一个非常大的好处:
		简单,不需要提高额外的API函数接口(直接利用文件系统的API函数)
		
	有人就想,能不能改进一下?
		问题在哪里呢?文件的内容在外设,在文件系统中,造成访问的效率低
		能不能把文件的内容放到内核或者内存上面去呢?
		管道就是把内容放到内核中,又可以利用文件系统的API函数
		
	(1).无名管道 pipe
		在文件系统中没有名字(没有inode),它的内容在内核中,访问pipe的方式是通过文件系统的API(read/write)
		
		一般访问文件的方式:
			fd = open(文件名);
			read(fd,,,);
			write(fd,,,,);
			....
		它没有名字,它不能使用open函数打开,但是read/write有需要一个文件描述符
		所有在创建这个pipe的时候,就必须要返回“文件描述符”
		pipe在创建的时候,在内核中开辟一块缓冲区,作为pipe内容的存储空间,同时返回两个文件描述符(一端用来读,一端用来写)
		并且有如下特定:
			a.有两端,一端用来读,一端用来写
			b.内容读走了就没有了(不存在于pipe中)
			c.按顺序读,不支持lseek
			d.pipe(无名管道)随内核的持续性
			
			
	函数接口:
		NAME
			   pipe, pipe2 - create pipe  创建一个管道
		SYNOPSIS
			   #include <unistd.h>
			   pipe是用来创建一个无名管道,pipefd指向一块空间,用来保存创建好的无名管道的两个文件描述符,pipe创建的管道,默认是阻塞模式。
				int pipe(int pipefd[2]);
				pipefd:指向一个数组的指针,保存两个文件描述符
					pipefd[0]保存读的文件描述符
					pipefd[1]保存写的文件描述符
				返回值:
					成功返回0,
					失败返回-1,同时errno被设置		
	思考:			
	pipe是不是任意两个进程都可以通信呢?
		不是(两个进程需要获取同一个管道的文件描述符)
	一般只能用于父子进程通信(有亲缘关系,且继承了文件描述符即可).		
		
	pipe是单向数据通道(半双工),
	pipe本身的全双工的,但是两个进程使用一个管道实现全双工通信,就必须以某一种方式去同步,不然自己很容易读取到自己发送的数据,一般做成两个或者多个管道,一个用来读,一个用来写。
		
	================================	
	pipe一般只能用于有亲缘关系的进程通信(且继承了文件描述符).	
	原因就是因为pipe在文件系统中没有名字(inode),无法通过open去获取文件描述符
	假如它在文件系统中有一个“名字”,它是不是就可以用于任意两个进程间的通信呢？
		可以,既然有名字,就可以通过open去获取文件描述符,而不是一定要通过“继承”的方式获取文件描述符
	
	(2).fifo(first in first out):有名管道
		fifo在pipe的基础上,给管道在文件系统中创建一个inode(就会有一个文件名),但是它的内容却是在内核中。
		=====>
		fifo的文件名是随文件系统的持续性(不删除就存在)
		fifo的内容却是在内核中。随内核的持续性。
		fifo和pipe一样,除了fifo在文件系统中有一个文件名
		操作fifo的方法和操作普通文件类似:
			open
			read/write
			close
		创建fifo的方法:
			a.通过linux的shell命令  mkfifo
			b.通过linux的API函数 mkfifo
			
		NAME
			   mkfifo, mkfifoat - make a FIFO special file (a named pipe)

		SYNOPSIS
			   #include <sys/types.h>
			   #include <sys/stat.h>
			   mkfifo用来在文件系统中创建一个fifo(有名管道)的入口(inode)
			   int mkfifo(const char *pathname, mode_t mode);
			   pathname:路径名,要创建的有名管道在文件系统中的名字(一般带路径)
			   mode:权限,创建的有名管道的权限,有两种方式指定:
					a.S_IRUSR  ...
					b.0664
				返回值:
					成功返回0
					失败返回-1,errno被设置
				
			   #include <fcntl.h>           /* Definition of AT_* constants */
			   #include <sys/stat.h>
			   int mkfifoat(int dirfd, const char *pathname, mode_t mode);
		
		FIFO(有名管道)它和无名管道类似,只不过FIFO在文件系统中存在一个inode,它可以被多个进程打开用来读和写,当进程使用FIFO来交换数据的时候,内核根本没有把内容写入到文件系统中去,而是保存在内核缓冲区,所有FIFO在文件系统中没有内容,仅仅是作为一个引用入口,提供一个文件名,给其他进程去open它
		在数据交换前,FIFO的两端(read/write)必须被打开,通过情况下,打开FIFO的一端会阻塞,直到另外一端也被打开。
		一个进程也可以以“非阻塞(O_NONBLOCK)”方式去打开,这种情况下,只读打开总是会成功,即便写端没有被打开,只写打开总会失败,并且errno == EENXIO,除非读端已经打开。
		
		02fifo_write.c/02fifo_read.c
		
		
		
	
		
	










