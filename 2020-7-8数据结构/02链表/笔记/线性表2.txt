
	无头结点单链表
		单:单一的方向,结点只会记录下一个结点的地址
	我们经常需要找到链表的最后一个结点的地址,需要知道链表中有多少个结点......
	
		每次需要知道这些信息的时候,就是从第一个结点开始遍历一遍链表。
		int num=0;
		struct node *last = NULL;
		last = first;
		while(last && last->next!= NULL)
		{
			last = last->next;
			num++;
		}
		//循环结束last就指向最后一个结点,结点的个数为num+1
		
	有人就提出,能不能专门开辟一个空间,保存链表本身的一些信息
		如:
			第一个结点的位置
			最后一个结点的位置
			链表中的结点个数
			......
		把保存链表本身的一些信息的空间叫做“头结点”
		头结点:作为管理者结点,用来管理整个链表的
		
	======>带头节点的单链表	
	
	实现带头节点的增删改查
	自己定义头结点和数据结点的类型以及操作链表的API接口(LinkedList.h):
	
	
	typedef int ElemType;//假设链表的用户数据类型为int
	
	//数据结点
	typedef struct node 
	{
		ElemType data;//数据域,存放用户数据
		struct node *next;//指针域,存放数据元素之间的关系
	}Node,*PNode;
	Node  =====> struct node
	PNode =====> struct node *
	
	
	//管理者结点,"头结点",一个头结点就表示一个链表
	typedef struct head
	{
		Node *first; //指向链表的第一个数据结点
		Node *last; //指向链表的最后一个数据结点
		int num; //链表中的数据结点的个数
	}Head;
	Head ===> struct head
	
	要实现的接口:
	/*
	create_list:创建一个带头节点单链表(只需要开辟一个头结点并且初始化即可)
	返回值:
		成功返回创建的带头节点单链表的头结点指针
		失败返回NULL
	*/
	Head *create_list();
	
	/*
	insert_elemt:往带头节点单链表中插入一个元素(实现头插法,尾插法,建立有序链表)
	@x:你要插入的元素
	@h:你要增加元素的链表的头结点地址
	返回值:
		无
	*/
	void insert_elemt(ElemType x,Head *h);
	
	//打印指定的链表
	
	//查找元素值为x的结点
	
	//删除元素值为x的结点
	
	//删除所有元素值为x的结点
	
	//清空链表(释放所有数据结点)
	
	//删除链表(先释放所有数据结点,再释放头结点)
	
	LinkedList.h
	LinkedList.c
	main.c
	
	=============================================================================
	在单链表中,如果要删除一个结点px,或者要在一个结点px前面插入一个结点,都需要知道px的前面哪一个结点的指针,在单链表中需要再一次的遍历才能找到。
	
	有人就提出,能不能在数据结点中,即保存下一个结点的指针,同时又保存它前一个结点的指针
	=====>双向链表
	

	实现带头节点双向链表的增删改查
	自己定义头结点和数据结点的类型以及操作链表的API接口(DoubleLinkedList.h):
	
	
	typedef int ElemType;//假设链表的用户数据类型为int
	
	//数据结点
	typedef struct node 
	{
		ElemType data;//数据域,存放用户数据
		struct node *next;//指针域,保存下一个结点的指针
		struct node *prev;//指针域,保存上一个结点的指针
	}Node,*PNode;
	Node  =====> struct node
	PNode =====> struct node *
	
	
	//管理者结点,"头结点",一个头结点就表示一个链表
	typedef struct head
	{
		Node *first; //指向链表的第一个数据结点
		Node *last; //指向链表的最后一个数据结点
		int num; //链表中的数据结点的个数
	}Head;
	Head ===> struct head
	
	要实现的接口:
	/*
	create_list:创建一个带头节点双向链表(只需要开辟一个头结点并且初始化即可)
	返回值:
		成功返回创建的带头节点双向链表的头结点指针
		失败返回NULL
	*/
	Head *create_list();
	
	/*
	insert_elemt:往带头节点双向链表中插入一个元素(实现头插法,尾插法,建立有序链表)
	@x:你要插入的元素
	@h:你要增加元素的链表的头结点地址
	返回值:
		无
	*/
	void insert_elemt(ElemType x,Head *h);
	
	//打印指定的链表
	
	//查找元素值为x的结点
	
	//删除元素值为x的结点
	
	//删除所有元素值为x的结点
	
	//清空链表(释放所有数据结点)
	
	//删除链表(先释放所有数据结点,再释放头结点)
	
	DoubleLinkedList.h
	DoubleLinkedList.c
	main.c
	
	
	
作业:
	所有作业的结点类型如下(带头节点单链表):
	typedef int ElemType;//假设链表的用户数据类型为int
	
	//数据结点
	typedef struct node 
	{
		ElemType data;//数据域,存放用户数据
		struct node *next;//指针域,存放数据元素之间的关系
	}Node,*PNode;
	
	//管理者结点,"头结点",一个头结点就表示一个链表
	typedef struct head
	{
		Node *first; //指向链表的第一个数据结点
		Node *last; //指向链表的最后一个数据结点
		int num; //链表中的数据结点的个数
	}Head;	
			
	
	1.归并两个有序链表(利用原有空间),并且使归并后的链表任然有序
		la:1 3 5 7 9
		lb:1 2 3 4 5 6 7 8 9 
		结果链表:1 1 2 3 3 4 5 5 6 7 7 8 9 9


		
head* merge_two_list(head *la,head *lb)
{
	if(!la&&la->first)
		return lb;
	if(!lb&&lb->first)
		return la;
		
	la->first = merge_two_list1(la->first,lb->next);
	la->num += lb->num;
	return la;
}

node* merge_two_list1(node*la,node*lb)
{
	if(!la)
		return lb;
	if(!lb)
		return la;

	if(la->data < lb->data)
	{
		la->next = merge_two_list(la->next,lb);
		return la;
	}
	else
	{
		lb->next = merge_two_list(la,lb->next);
		return lb;
	}
}
	
	
	
	
	Head *Merge(Head *la,Head *lb)
	{
	
	}
	
	2.无序链表head有正有负,写一个函数,把负数放到正数前面,原有顺序保持不变
		如:
		head: 1 -4 -7 2 5 -8  6
		处理后的链表:-4 -7 -8 1 2 5 6
		void change_list(Head *h);	
		
		
	3.有两个链表la,lb,写一个函数,判断la是否为lb的子序列
		如果是子序列返回1,否则返回0
		la:4 5 7
		lb:1 4 5 7 2 9
		la是lb的子序列
	int La_is_son_of_lb(Head *la,Head *lb);

	4.返回一个链表中,倒数第k个结点的指针
	Node *reverse_K(Head *h,int k);
	
	
	5.有一个链表La,判断la中是否存在环？
		环:最后一个数据结点的指针指向前面数据结点构成环

	int have_loop(Head *h);
	
	
	6.找一个链表的中间结点(只允许遍历一次链表)
	Node *middle(Head *h);
	
	7.有两个链表A,B,求A,B的交集,A,B,升序,要求C升序
		不管A,B中是否存在重复元素,C中不允许存在重复元素。

		如:
		la:1 2 2 3 3 4 4 4 5 6 8
		lb:2 2 2 6 6 6 7 8 8 8 9 
		lc:2 6 8 
		
	Head *Intersection(Head *la,Head *lb);	
		
		
	循环单链表-增删改查
	带头节点循环双向链表-增删改查	

	
练习:	
	有两个链表A,B,求A,B的并集,A,B,升序,要求C升序
	不管A,B中是否存在重复元素,C中不允许存在重复元素。	
	
	如:
	la:1 2 2 3 3 4 4 4 5 6 8
	lb:2 2 2 6 6 6 7 8 8 8 9 
	lc:1 2 3 4 5 6 7 8 9
		




