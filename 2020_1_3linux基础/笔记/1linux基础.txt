linux基础

1.linux软件的安装
	a.APT(Advanced Packaging Tools)
	是ubuntu中功能最强大的命令行(shell)软件包管理工具
	用于获取安装卸载查询软件的功能
	它在ubuntu中的作用，相当于手机中的软件管家
	
	工作原理:
		在软件镜像服务器地址(UDP的服务器)中把软件的安装包或者源代码下载的本地编译安装。
		软件镜像服务器地址有很多，你自己也可以做一个，一般会选择一个国内的下载速度最块的最知名的服务器
		软件镜像服务器地址：保存到了APT的配置文件中(你的机器会从哪一个镜像服务器获取软件)
			/etc/apt/sources.list
			保存了软件服务器镜像的地址，你会从保存的镜像地址下载软件
			换源：把sources.list中的内容换掉
				1.粗暴的，最直接有效的
					百度一个你系统对应的源服务器地址列表，放到你的sources.list中
					一般会自己先备份(所有的配置和更改都需要做备份)
				2.ubuntu系统设置--->软件和更新---->下载自(选择一个自己认可的)
				关闭时显示：要通过新加入或已变更的软件源来安装或更新软件包，您必须重新载入可用软件包列表。
				可用软件包列表:每一个服务器上面的软件包基本上都有差异
				
			sudo apt-get update
			从新的服务器上面获取服务器软件包列表
			
			sudo apt-get install xxx
			安装xxx软件包到本地
			
			sudo apt-get remove xxx
			从本地卸载xxx软件
			
			sudo apt-get clean
			删除缓冲区已经下载的包文件
			
			sudo apt-cache search xxx
			根据表达式搜索关键字xxx对于的软件包
			
	b.直接通过源代码安装
		1.下载源代码到本地 tar包
		2.解压源代码,进入源代码目录
		3.配置生成Makefile  ./configure  
		4.编译源代码 make
		5.安装 sudo make install

2.linux中的神器Vi/VIM
	多用,多学。
	vim是vi的增强版本，是linux中最基本，功能最强大的命令行文本编辑工具
	vim ----> “编辑器”
	
	你要编辑什么文件:vim filename(可以是绝对路径，也可以是相对路径)
				文件存在就会打开,文件不存在则创建
	
	vim 有两种工作默认:
		命令模式:键盘上输入的东西通通都是当做命令处理
		进入vim默认是命令模式，之所以强大是因为他支持很多的命令

		输入模式:键盘上输入的东西通通都是文件的内容
		
		输入模式----->命令模式
			esc
			
		命令模式----->输入模式
			i:insert  进入输入模式后，光标在当前字符(光标不动)
			I:insert  进入输入模式后，光标在当前行首
			a:append	进入输入模式后，光标往后移动一个字符
			A:Append	进入输入模式后，光标在当前行尾
			o:open		进入输入模式后，光标在当前行的下一行的行首 新创建一行
			O:Open  	进入输入模式后，光标在当前行的上一行的行首 新创建一行
			
		常用的vim命令(命令只能在命令模式下输入)：
			退出命令
			:q		quit 不保存退出
			:q!		quit 不保存强制退出
			:w		write	保存文件但是不退出
			:wq		write quit 保存文件后退出
			:w filename 把文件的内容保存到filename指定的文件中去--->另存为
			
			删除和修改命令
			x 	删除光标所在的字符
			dd	delete 删除光标所在的行
			ndd(dnd)	删除光标以及光标下的n-1行
				如：
					5dd	删除从光标开始的5行
					dd/ndd ---> 剪切,把删除的内容放到粘贴板
			r	replace 替换光标所在的单个字符
				r + 新字符
			R	Replace	替换光标已经后面的多个字符，直接按ESC键退出替换模式
				R + 一串新字符 + esc
			u  	undo 撤销

			拷贝和粘贴
			ndd 剪切
			yy	复制,把当前行复制到粘贴板
			nyy	将当前行以及从光标开始的n-1行复制到粘贴板
			
			p	paste/print	将粘贴板上面的内容粘贴到光标所在的行的后面
			P	Paste/Print 将粘贴板上面的内容粘贴到光标所在的行的前面
			
			搜索命令 在文档中找关键字
			
			/+你要查找的字符
			如：	
			/main
			在当前文件中搜索字符串main
			按n是搜索下一个
			
		关于vim：
			1.上面的命令都是一些简单的，常用的命令，需要熟悉
			
			2.vim可以有一个配置文件
				.vimrc  --->用户的主目录下面
				(以.开头的文件是linux中的隐藏文件)
				可以实现很多功能，显示行号,语法高亮,代码自动折叠.....

3.linux中基本命令
		linux的帮助手册
			linux是一个面向开发者的系统
			提供非常多的命令或者函数的文档和手册
			
			linux自带很多的开发手册，而且给不同内容分类
			如：man open
				open命令,open函数
				一个名字可能存在于多个手册页
				man -f 名字  查看“名字”存在于哪些手册页中
				man 手册页分类 函数名/命令名
				
				man -a 名字
				a：all
				查看所有关于这个名字的帮助文档
			
		基本的系统维护名字
			shutdown 定时关机
				sudo shutdown -h now
				
			reboot 	重启
			
			poweroff	关机
			clear		清理终端
			
			linux中命令自动补全功能(命令,文件名,路径...):
				tab键
			如：
				shu + tab键 终端会把所有以shu开头的命令列举出来
				如果选择唯一就会直接帮你补全
				
			linux中历史命令：
				如果要执行已经执行过的命令，可以按方向键网上翻
				终端会把所有输入的命令保存到用户的家目录中的一个隐藏文件中
				.bash_history
				
			su username  切换用户
				username 省略 -----> su root
				第一次进入root用户，是没有密码的
				进入root后，设置一个自己的linux密码
				
				sudo -s ----->切换到管理员用户	
			passwd 修改当前用户的密码
			exit 退出当前用户，如果当前用户是最后一个终端用户，那么会直接退出终端
			
		用户管理命令
			linux是一个多用户的系统
			/etc/passwd这个文档保存了系统上面每一个用户的信息
			每一行代表一个用户
			gec:x:1000:1000:Ubuntu14.04LTS,,,:/home/gec:/bin/bash
			用户名:口令:用户ID(UID):组ID(GID):描述性信息:用户的家目录:用户SHELL
				UID:系统会为每一个用户创建一个数字，用来表示这个用户
				GID:group id 每一个用户都会属于一个用户组，GID一般是组长id
				用户的家目录:HOME，目录，系统会给每一个用户分配一个主目录
					用户在自己的家目录中有绝对的权限
					一般会建议用户在自己的主目录下工作
				用户SHELL
					终端的命令解析器(解析用户输入的命令),本身就是一个程序
					这个程序有很多人都自己去实现了，所以有不同种类的shell
					用户和操作系统之间沟通的桥梁
					
					用户组管理 
					/etc/group这个文档保存了系统上面每一个用户组的信息
					每一行代表一个用户组
					组名:口令:GID:成员列表
					
					命令:
					创建用户	adduser  + 要创建的用户名
					删除用户	userdel  + 要删除的用户名
					创建用户组	addgropu + 要创建的用户组名
					删除用户组	groupdel + 要删除的用户组名
			
		进程管理
			进程:正在运行的程序，我们称之为进程(process)
			ps：process status  进程状态
				To see every process on the system using standard syntax:
				  ps -ef

				To see every process on the system using BSD syntax:
				  ps axu
				  
				  
			UID     PID  PPID  C STIME TTY        TIME CMD
			root    616    1  0 09:07 ?        00:00:00 smbd -F	
			用户	进程号 父进程号   					 进程名字
			
			用来查看当前系统中所有运行的程序,以及每一个程序的详细信息
			
			pstree 查看进程树

			top  查看系统中进程的动态信息
		
			根据进程的信息，结束一个进程
			如：当前进程正在占用终端
				ctrl + c
				
			kill 命令可以杀死进程	
			kill -9 程序PID
			killall 程序名
			
			无论是哪种方式，实现的原理都是一样的，实际上是给进程发了一个信号
			进程收到信号，结束。

4.linux中的文件组织方式
		linux操作系统是如何管理文件的，怎么存储文件的
		当你需要把一个文件的数据，存储到计算机的物理介质的时候，就需要一些组织和管理数据的方法(需要一些元数据)和规则。
		这些方法和规则就是我们常说的文件系统格式。
		文件系统：存储和管理文件的方法
		存储一个文件的时候，必须按照一定的格式，这个格式就是我们所说的文件系统格式
			linux：
				ext2
				ext3
				ext4
				...
				fat
				fat32
				exfat32
			windows:
				NTFS
				....
		
		几乎所有的文件系统，都会把“文件”分为两个部分
			文件的属性:文件的类型,作者,文件的修改时间,文件的名字....
					标识文件的存在(文件的属性存在,则文件一定存在)
					存储到磁盘的 I-node(I-节点)中
				如:
					我要自己实现一个文件系统,要保存属性还要保存数据
					A：
					struct inode
					{
						文件的类型
						文件名字
						文件的大小
						....
						...
						内存扇区(标识文件的内存存储在哪里)
					}
					
					不同的文件系统,inode的内容和成员布局不一样
					一个文件可以没有内容(空文件),只要这个文件存在,一定有自己的属性
					有自己的 i-node
			文件的内容:文件本身的用户数据
			
					stat 查看文件的inode编号的。
					stat 1.c
					文件："1.c"
					大小：61        	块：1          IO 块：1024   普通文件
					设备：18h/24d	Inode：164203      硬链接：1
					权限：(0777/-rwxrwxrwx)  Uid：(    0/    root)   Gid：(    0/    root)
					最近访问：2020-01-03 14:09:58.458351800 +0800  	atime
					最近更改：2020-01-03 14:10:27.321002700 +0800	mtime
					最近改动：2020-01-03 14:10:27.321002700 +0800	ctime
					创建时间：-	
				
			linux中目录(也是文件)	只是目录文件的内容是目录项
				每一个inode都有自己的编号,操作系统使用inode号码识别不同的文件
				操作系统不是通过文件名字去识别文件，而是通过inode号码
				访问文件的步骤:
					1.在目录中找到对于名字的目录项
					2.找到目录项中的inode号码
					3.通过inode号码找到inode的信息
					4.inode信息中就有关于文件内容的block数据
				
			
	linux文件系统对文件的组织方式	
		树状结构管理文件
		文件名:(文件又分为很多类型，其中最最常用的是普通文件和目录文件)
			普通文件名:由一些特定的允许的字符串组成
			目录名:由一些特定的允许的字符串 + '/' 组成
			/ ==>根目录
			
		linux中的文件路径名:
			绝对路径: 以 ‘/’ 开始的路径
					绝对存在和正确的一个路径
					pwd可以显示当前目录的绝对路径
					
			相对路径: 不是以 ‘/’ 开始的路径
					相对当前位置的一个路径
				
			如：当前在home目录下
			有一个文件名字叫做1.c
			1.c   相对路径(相对当前位置的一个路径)
			/home/gec/1.c  绝对路径
			
	文件系统相关命令
		cd 	change directory 改变当前工作目录
			
			cd + 要去的地方(可以是绝对路径，是相对路径)
			cd 不加任何目录，默认进入家目录
				linux为了用户的方便
				..	上一级目录
				.	当前目录  ./a.out
				-	上一次访问的目录
			ls list  列举一个指定目录下面所有的文件名
			ls [options] 目录名
				省略目录名，默认列举当前目录下面的所有文件
				
			   [options] 选项,可以有也可以没有
				-a all 把指定目录下面所有的文件都列举出来(包括隐藏文件)
				-l 把文件的详细信息列举出来
				
				ls -l / 把根目录下面的所有文件的详细信息列举出来
				-rwxr-xr-x   1 root root   299 Jul  9 20:34 100.sh
				-rwxr-xr-x   1 root root   304 Jul  9 20:43 10.sh
				drwxr-xr-x   2 root root  4096 Jun 10  2016 bin
					
		chmod  change mode 改变文件的权限
			用法:
				chmod u/g/o/a +- rwx  文件名
					用户缩写  增加获取去掉权限
 
			u:user 用户
			g:group 用户组
			o:other 其他用户
			a:all 	所有用户
			+ 增加权限
			- 去掉权限
			
			
			chmod u+w file 给file的所有者增加一个写的权限
			chmod u+rw file 给file的所有者增加一个读写的权限
			chmod ug+rw file
			
			内部实现:使用bit位去管理权限的
			====》
			rwx rwx rwx
			111 111 111
			相应的位为1，则有权限，位为0则无权限
			使用三个八进制数字表示文件的三种权限
			
			rw-r--r-- =====> 110 100 100 ====> 644
			chmod 644 file   rw-r--r-- 
			chmod 777 file	 rwxrwxrwx
			
			我们有时候不仅仅需要改变权限还需要改变所有者。
			
		chown change owner 改变文件所有者
			
			chown [R] 新的所有者:新的组 filename
			-R:如果filename是一个目录，则递归的把该目录下所有的文件都改为指定的所有者
			
		cp copy 复制文件或者目录
			cp [options] SOURCE(源) DEST(目标) 
				源文件和目标文件既可以是目录也可以是文件
				
				SOURCE 		DEST
				目录1		目录2	把目录1的所有内容拷贝到目录2下面去
				目录1		文件2	ERROR
				文件1		目录2	把文件1拷贝到目录2下面去
				文件1		文件2	把文件1的内容拷贝到文件2中去，文件2中原来
									的内容就没有了，如果文件2不存在则创建
				
				options
					-r	recursive 递归的,如果SOURCE是一个目录，则必须加上 -r
					-f  force 强制的 
					
		mv :move 移动 重命令
			mv [options] SOURCE(源) DEST(目标)
				源文件和目标文件既可以是目录也可以是文件
				SOURCE 		DEST
				目录1		目录2	把目录1的所有内容移动到目录2下面去
									if 目录1的路径 == 目录2的路径 && 目录2不存在
										则是把目录1的名字改为目录2
				目录1		文件2	ERROR
				文件1		目录2	把文件1移动到目录2下面去
				文件1		文件2	重命名，如果DEST存在，则先删除
				
			
		mkdir  make directory 创建目录
			mkdir [-p] 要创建的目录名字
			-p 如果父目录不存在，则先创建父目录
			
			mkdir AAA/XXX 如果AAA不存在则报错
			mkdir -p  AAA/XXX 如果AAA不存在则先创建AAA
			
			
		rmdir remove directory 删除空目录
			rmdir + 你要删除的目录
			
		rm 删除文件或者目录
			rm [options] DEST
				DEST:你要删除的文件
				options
					-r	recursive 递归的,如果DEST是一个目录，则必须加上 -r
					-f  force 强制的 

5.linux中的链接文件					
	分为硬链接和软连接
	windows不支持链接文件,操作不要放在共享文件夹中
	
	硬链接
	ln target link_name
	ln 源文件 目标文件
	为源文件target创建一个名字问link_name的硬链接
	一般情况下，inode和文件名一一对应，每一个inode号码对应一个文件名，unix和linux允许多个文件名对于同一个inode,意味着，使用不同的文件名可以访问同一个文件的内容
	对文件内容的修改，会影响到所有指向同一个inode号码的文件，删除一个文件不会影响其他文件(只是硬链接数量减一，当硬链接数量为0时，文件就被删除了)
	
	
	软连接
	ln -s target link_name
	ln -s   源文件 目标文件
	为源文件target创建一个名字问link_name的软链接
	
	ln -s A B 
	A文件和B文件的inode号码不相同，是两个独立的文件，但是文件B的内容是文件A的路径，
	读取文件B的时候，系统会先找到B的inode，在找到B的内容(文件A的名字)，再去找到文件A的inede，在找到文件A的内容
	文件B是依赖于文件A的，如果文件A不存在了，则文件B失效，如果A改动了，B访问的内容是新的内容
				
					
6.linux中文件的打包和压缩
	文件的压缩和归档
	归档文件:将多个文件或者文件夹按照算法保存到同一个文件中(打包)
	压缩文件:将多个文件或者文件夹按照算法压缩保存到同一个文件中(打包且压缩)
	
	linux : tar 
	tar [options] tarfile filelist(在解压的时候不需要)
		tarfile 压缩和归档后生成的文件名
		filelist 你要压缩或者归档的文件列表
		[options]
			-c create 创建一个归档文件
			-x 释放一个归档文件
			-v 显示归档或者释放过程信息
			-f filename 指定规定后产生的文件的名称
			-j 有tar命令生成归档文件，并且调用bzip2算法压缩
			-z 有tar命令生成归档文件，并且调用gzip算法压缩
			
	归档：
		tar -cvf xxx.tar 1.c 2.c 3.c ...(filelist)
		把filelist打包成一个名字叫做xxx.tar的文件
	
	释放:
		tar -xvf xxx.tar
		把xxx.tar 释放到当前文件夹中
		
		tar -xvf xxx.tar -C dir
		把xxx.tar 释放到dir指定的文件夹中

	压缩：
		
		tar -jcvf xxx.tar.bz2 1.c 2.c 3.c ...(filelist)
		把filelist指定的文件利用bzip2算法压缩到文件xxx.tar.bz2中去
		
		tar -zcvf xxx.tar.gz 1.c 2.c 3.c ...(filelist)
		把filelist指定的文件利用gzip算法压缩到文件xxx.tar.gz中去
		
	解压缩:
		tar -jxvf xxx.tar.bz2
		把文件 xxx.tar.bz2 解压缩到当前文件夹
		tar -zxvf xxx.tar.gz
		把文件 xxx.tar.gz 解压缩到当前文件夹
	
		tar -zxvf xxx.tar.gz -C dir
		把文件 xxx.tar.gz 解压缩到dir指定的文件夹中
	
		
	
	作业：
		1.熟悉所有基本的linux操作已经命令
		
		2.自己搞定grep和find的用法。只能自己多练习使用
		
		3.请自己查资料了解正则表达式和shell脚本的使用。








