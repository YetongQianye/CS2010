库 
	动态库
	静态库
	二进制仓库
	库是一种二进制的封装形式,让其他工程之间调用,而又看不到它(库)的源代码。
	为什么看不到它(库)的源代码?
		因为库是二进制的封装形式
	库这种方式有利于模块化,而且只要接口设计合理,改变库的实现,不影响使用库的代码	
		
		库 	源文件的二进制形式
			库文件中绝对不可以有main函数
	linux  	动态库(.so) 静态库(.a) 		
	windows .dll		
			
			
动态库(又叫共享库 shared)
	动态库的使用步骤
	1.编辑源代码
		xxx.c 		功能函数的实现 
		xxx.h		类型的定义和函数的声明(接口文件)
		
	2.把源代码编译成动态库
		把功能源代码编程一种谁都可以调用的二进制文件
		(arm-linux-)gcc -shared -fpic        -o      libnb.so  xxx.c
		编译器名称	  动态库   符号与位置无关 output  库名字	文件列表

		可以有很多源文件,以空格隔开
		libnb.so
			动态库的名字必须以lib开头,必须以.so结尾
			
	3.再把动态库和头文件拷贝给需要的人就可以了
		我有一个工程(deme-nb):
			inc/ 	存放外部的头文件
			lib/ 	存放需要应用的库文件
			src/	存放工程源代码
			readme.txt		一些使用说明,版权,编译,作者,bugs.....
			changelog.txt 	版本说明文件(....)
		
		编译工程:	
		fatal error: nb.h: 没有那个文件或目录
		#include"nb.h"  //先在当前目录查找,再去标准路径查找
		
		原因:编译器找不到指定的头文件
		指定头文件查找路径
		-I(include)
		-I接一个目录名,指定头文件查找路径,可以加多个-I
		-I后面不需要空格,并且可以使用相对路径和决定路径
		
		gcc main.c -o main -I../inc
		
		/tmp/cc3uxy78.o：在函数‘main’中：
		main.c:(.text+0x4a)：对‘my_nb’未定义的引用
		collect2: error: ld returned 1 exit status
		你的工程源文件中使用到了其他模块提供的函数的时候,你必须告诉你的编译器,你的函数是在哪里实现(定义)的
		my_nb 实现在动态库中,指定库的名字
		-l(lib)
		printf/scanf 这两个函数为什么不需要指定实现的位置呢?
			因为这个是C语言标准库,编译器自动包含这个库文件
		总之,你的代码中如果用到了不是你自己实现的函数,你就必须告诉编译器,你的函数是在哪里定义的
		-l可以指定库的名字(去掉前面的lib和后面的.so)
		libnb.so -----> -lnb
		
		gcc main.c -o main -I../inc -lnb
		/usr/bin/ld: 找不到 -lnb
		collect2: error: ld returned 1 exit status
		-l只是指定了库的名字,但是没有指定路径,编译器找不到这个库在哪里,因为编译器只会去标准路径下查找库(/lib:/usr/lib....)
		必须指定库的路径.
		-L指定库的查找路径,可以指定多个,可以是绝对路径,也可以是相对路径
		-L../lib  去上一级目录的lib下面查找库
		
		-I -l -L 的作用。
		
		ldd main 可以查看main函数用到的库函数
		
		-L/home/gec -lA -lB -lC
		编译器会去/home/gec中查找库,查找的库有libA.so libB.so libC.so
		注意:
			库是给其他工程使用的,一个工程中只能有一个main函数
			所有的库函数中,都不能定义main函数
		
		ldd main
		linux-vdso.so.1 (0x00007ffc7bff8000)
		libnb.so => not found
		libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007f72d8d2b000)
		/lib64/ld-linux-x86-64.so.2 (0x00007f72d931e000)
		
		运行的时候
		 ./main
		./main: error while loading shared libraries: libnb.so: cannot open shared object file: No such file or directory
		
		动态库有一个你必须记住的特定:工程中用到了库函数时,在编译的时候,并不会把用到的动态库函数的指令复制到可执行文件中去,仅仅是做了一个标记,表示在某一个地方用到了某某库
		如:
			上面的可执行文件main中,main并没有包含这个libnb.so的内容,只是标记main用到了libnb.so这个库,这样就会导致一个文件,在运行main的时候,会先去内存中找是否存在libnb.so这个库,如果没有,则先把这个库加载到内存
			
			找的时候,有可能找不到,你要告诉shell,去哪里找这个库
			linux有一个环境变量:
			LD_LIBRARY_PATH  load library path 加载库的路径
			设置环境变量,也可以把库文件放到标准查找路径中
			export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/mnt/hgfs/CS2010/2020-7-21交叉开发/code/shared-lib/demo-nb/lib
			
			ldd main
			linux-vdso.so.1 (0x00007ffe293af000)
			libnb.so => /mnt/hgfs/CS2010/2020-7-21交叉开发/code/shared-lib/demo-nb/lib/libnb.so (0x00007f6cdfbdd000)
			libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007f6cdf7ec000)
			/lib64/ld-linux-x86-64.so.2 (0x00007f6cdffe1000)
			
		动态库:
			不仅在编译的时候需要动态库,在运行的时候也需要动态库

		练习:
		写一个库函数,给一个一维数组排序,制作成动态库,放到开发板上面可以被调用
			20分钟
			
静态库
	静态库也是库的一种形式,也是一种代码的二进制封装形式,在静态库做好之后,需要静态库的工程在编译的时候,会把静态库之间编译进可执行文件中去,这个可执行文件就可以直接运行,不需要加载库文件
	
	静态库的制作方式:
	1.编辑源代码
		xxx.c 		功能函数的实现 
		xxx.h		类型的定义和函数的声明(接口文件)
		
	2.把源代码编译成静态库
		a.把所有源文件编译成.o的形式
		mysort.c --------> mysort.o
		.....
		.....
		(arm-linux-)gcc -c mysort.c -o mysort.o
		
		b.利用ar命令把所有的.o文件,打包生成一个静态库
		(arm-linux-)ar -rc libmysort.a mysort.o
		静态库:是以lib开头,以.a结尾
		把头文件和库文件拷贝给需要使用的人即可
		
		
	3.自己写的工程就可以使用静态库
		(arm-linux-)gcc main.c -o main -I../inc -lmysort -L../lib
		
		交叉编译下载可执行文件到开发板上面可以直接运行,
		不需要下载静态库(可执行文件中已经包含了库内容)
		
	总结:
		假如你以后需要写一个库,请问你是使用静态库还是动态库?为什么?
		
		函数接口不会改变的经常使用动态库,函数接口可能改变的经常使用静态库
		
		静态库和动态库各有优势
		
		静态库: 编译之后就不需要静态库文件了,不管你的机器中有没有静态库
				动态库在编译和运行的时候都需要库文件
		
		动态库:
			1.静态库明显是冗余的
				动态库在系统中,永远只有一份拷贝
				而静态库在运行的系统中,有多少个可执行文件,就有多少份拷贝
				
			2.动态库更新更加方便
				只要函数的接口不变(函数名,返回值类型,参数列表)
				依赖于动态库的可执行程序就不需要重新编译,
				只需要把更新好的库文件下载到相应的系统即可,这一点静态库做不到
				
		
		
	作业:
		1.自己总结一下动态库和静态库的优势。
		
		2.写一个库函数,能够找出一个一维数组的最大值,
		把这个函数分别制作成动态库和静态库,放到开发板上运行。
		
		
		
	
			
			
			
			
			
			
			
			

